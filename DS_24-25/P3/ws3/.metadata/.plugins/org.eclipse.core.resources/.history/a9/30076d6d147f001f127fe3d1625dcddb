package main;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

import editor.core.EditorWindow;
import tools.Herramienta;

public class Menu {

	private EditorWindow editor;
	private Map<String, Herramienta> herramientas = new HashMap<String, Herramienta>();

	public Menu(EditorWindow editor) {
		this.setEditor(editor);
	}

	public void ejecutar() {
		mostrarAyuda();
		do {
			preguntarUsuario();
		} while (true);
//
//      BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
//      do {
//          System.out.print("> ");
//          String[] line = in.readLine().split("[ ,]");
//
//          if (line[0].equals("exit"))
//              return;
//
//          //$ Pulsación de los botones de las herramientas -----------------------------
//
//          if (line[0].startsWith("rec"))
//              editor.toolButtonClicked(new HerramientaRectangulo());
//
//          else if (line[0].startsWith("cir"))
//              editor.toolButtonClicked(new HerramientaCirculo());
//
//          else if (line[0].startsWith("tri"))
//              editor.toolButtonClicked(new HerramientaTriangulo());
//
//          else if (line[0].startsWith("sel"))
//              editor.toolButtonClicked(new HerramientaSeleccion());
//
//          //$ Acciones del Ratón -----------------------------
//
//          else if (line[0].startsWith("pin"))
//              editor.mousePressed(Integer.parseInt(line[1]), Integer.parseInt(line[2]));
//
//          else if (line[0].startsWith("mov"))
//              editor.mouseMoved(Integer.parseInt(line[1]), Integer.parseInt(line[2]));
//
//          else if (line[0].startsWith("sol"))
//              editor.mouseReleased(Integer.parseInt(line[1]), Integer.parseInt(line[2]));
//
//          //$ Otros comandos -----------------------------
//
//          else if (line[0].startsWith("dib"))
//              editor.dibuja();
//
//          else
//              System.out.println("Comando no válido");
//
//      } while (true);
//  }
	}

	private void preguntarUsuario() {
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		System.out.print("$> ");
		String[] line = in.readLine().split("[ ,]");

		if (line[0].equals("exit"))
			return;

		if (line[0].equals("help"))
			mostrarAyuda();

		// $ Pulsación de los botones de las herramientas -----------------------------

//		if (line[0].startsWith("rec"))
//			editor.toolButtonClicked(new HerramientaRectangulo());
//
//		else if (line[0].startsWith("cir"))
//			editor.toolButtonClicked(new HerramientaCirculo());
//
//		else if (line[0].startsWith("tri"))
//			editor.toolButtonClicked(new HerramientaTriangulo());
//
//		else if (line[0].startsWith("sel"))
//			editor.toolButtonClicked(new HerramientaSeleccion());
		if (herramientas.containsKey(line[0])) {
			Herramienta herramienta = herramientas.get(line[0]);
			editor.setHerramientaActual(herramienta);
		}

		// $ Acciones del Ratón -----------------------------

		else if (line[0].startsWith("pin"))
			editor.mousePressed(Integer.parseInt(line[1]), Integer.parseInt(line[2]));

		else if (line[0].startsWith("mov"))
			editor.mouseMoved(Integer.parseInt(line[1]), Integer.parseInt(line[2]));

		else if (line[0].startsWith("sol"))
			editor.mouseReleased(Integer.parseInt(line[1]), Integer.parseInt(line[2]));

		// $ Otros comandos -----------------------------

		else if (line[0].startsWith("dib"))
			editor.dibuja();

		else
			System.out.println("Comando no válido");
	}

	private void mostrarAyuda() {
		System.out.println("\nActivación de Herramientas: rectangulo | circulo | triangulo | seleccion");
		System.out.println("Acciones de Ratón: pinchar x,y | mover x,y | soltar x,y");
		System.out.println("Otros Comandos: dibujar | exit | help \n");
	}

	public void addHerramienta(String stringTool, Herramienta tool) {
		herramientas.put(stringTool, tool);
	}

	public EditorWindow getEditor() {
		return editor;
	}

	public void setEditor(EditorWindow editor) {
		this.editor = editor;
	}
}
