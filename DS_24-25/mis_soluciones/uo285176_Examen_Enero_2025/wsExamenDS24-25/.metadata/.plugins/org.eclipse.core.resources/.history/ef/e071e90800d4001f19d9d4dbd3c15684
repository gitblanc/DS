package gui;

import java.awt.Font;
import java.awt.FontMetrics;
import java.util.HashMap;
import java.util.Map;

import javax.swing.BorderFactory;
import javax.swing.JRadioButton;
import javax.swing.JTextArea;

import gui.botones.AlinearDerecha;
import gui.botones.AlinearIzquierda;
import gui.botones.Centrado;
import gui.botones.Justificado;
import model.Document;
import model.Line;

public class Canvas extends JTextArea {

	private Document document;
	private int lineWidth; // Number of characters per line

//	private JRadioButton leftButton;
//	private JRadioButton justifiedButton;
//	private JRadioButton centeredButton;
//	private JRadioButton rightButton;

	private Map<String, Boton> botones;
	private Boton defaultBoton, botonSeleccionado;

//	public Canvas(Document document, JRadioButton leftButton, JRadioButton justifiedButton, JRadioButton rightButton,
//			JRadioButton centeredButton) {
//		setFont(new Font("Monospaced", Font.BOLD, 24));
//		setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
//		setEditable(false);
//
//		this.document = document;
//		this.leftButton = leftButton;
//		this.justifiedButton = justifiedButton;
//		this.centeredButton = centeredButton;
//		this.rightButton = rightButton;
//
//		drawDocument();
//	}

	public Canvas(Document document, JRadioButton... botones) {
		setFont(new Font("Monospaced", Font.BOLD, 24));
		setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
		setEditable(false);

		this.document = document;

		this.botones = new HashMap<>();
		crearBotones(botones);
		this.defaultBoton = botonSeleccionado = this.botones.get("Left");

		drawDocument();
	}

	// Método privado que inicializa los botones o herramientas del editor
	private void crearBotones(JRadioButton... botones) {
		for (int i = 0; i < botones.length; i++) {
			if (botones[i].getText().equals("Left"))
				this.botones.put(botones[i].getText(), new AlinearIzquierda());
			else if (botones[i].getText().equals("Justified"))
				this.botones.put(botones[i].getText(), new Justificado());
			else if (botones[i].getText().equals("Right"))
				this.botones.put(botones[i].getText(), new AlinearDerecha());
			else if (botones[i].getText().equals("Centered"))
				this.botones.put(botones[i].getText(), new Centrado());
		}
	}

	/**
	 * Adjust the number of characters per line to the given width in pixels. It is
	 * invoked when the container window is resized.
	 */
	public void adjustWidth(int width) {
		FontMetrics metrics = getFontMetrics(getFont());
		var charWidth = metrics.charWidth('A');
		var padding = getInsets().left + getInsets().right;
		lineWidth = (width - padding) / charWidth;

		drawDocument();
	}

	public void drawDocument() {
		setText("");

		for (var line : document.getLines()) {

			if (leftButton.isSelected()) { // Left alignment
				append(line.getContent());
			} else if (justifiedButton.isSelected()) { // Justified
				append(createJustifiedLine(line));
			} else if (rightButton.isSelected()) {
				append(createRightAlignedLine(line));
			} else if (centeredButton.isSelected()) {
				append(createCenteredLine(line));
			}

			append("\n");
		}
	}

	// Método para la ampliación encargado de centrar el texto
	private String createCenteredLine(Line line) {
		var builder = new StringBuilder();
		var totalSpacesNeeded = lineWidth - line.numberOfCharacters();

		// Compute the number of spaces per gap
		var spacesPerGap = Math.max(1, totalSpacesNeeded / line.numberOfGaps());
		// The remaining spaces are distributed from left to right
		var extraSpaces = Math.max(0, totalSpacesNeeded - (spacesPerGap * line.numberOfGaps()));

		for (int i = 0; i < line.getWords().size(); i++) {
			builder.append(line.getWord(i));

			if (i < line.numberOfWords() - 1) {
				builder.append(" ".repeat(spacesPerGap));

				if (extraSpaces > 0) {
					builder.append(" ");
					extraSpaces--;
				}
			}
		}

		return builder.toString();
	}

	// Método para la ampliación encargado de alinear a la derecha
	private String createRightAlignedLine(Line line) {
		var builder = new StringBuilder();
		var totalSpacesNeeded = lineWidth - line.numberOfCharacters();

		// Compute the number of spaces per gap
		var spacesPerGap = Math.max(1, totalSpacesNeeded / line.numberOfGaps());
		// The remaining spaces are distributed from left to right
		var extraSpaces = Math.max(0, totalSpacesNeeded - (spacesPerGap * line.numberOfGaps()));

		for (int i = 0; i < line.getWords().size(); i++) {
			builder.append(line.getWord(i));

			if (i < line.numberOfWords() - 1) {
				builder.append(" ".repeat(spacesPerGap));

				if (extraSpaces > 0) {
					builder.append(" ");
					extraSpaces--;
				}
			}
		}

		return builder.toString();
	}

	private String createJustifiedLine(Line line) {
		var builder = new StringBuilder();
		var totalSpacesNeeded = lineWidth - line.numberOfCharacters();

		// Compute the number of spaces per gap
		var spacesPerGap = Math.max(1, totalSpacesNeeded / line.numberOfGaps());
		// The remaining spaces are distributed from left to right
		var extraSpaces = Math.max(0, totalSpacesNeeded - (spacesPerGap * line.numberOfGaps()));

		for (int i = 0; i < line.getWords().size(); i++) {
			builder.append(line.getWord(i));

			if (i < line.numberOfWords() - 1) {
				builder.append(" ".repeat(spacesPerGap));

				if (extraSpaces > 0) {
					builder.append(" ");
					extraSpaces--;
				}
			}
		}

		return builder.toString();
	}
}
