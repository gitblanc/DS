package gui;

import java.awt.Font;
import java.awt.FontMetrics;
import java.util.HashMap;
import java.util.Map;

import javax.swing.BorderFactory;
import javax.swing.JRadioButton;
import javax.swing.JTextArea;

import gui.botones.AlinearDerecha;
import gui.botones.AlinearIzquierda;
import gui.botones.Centrado;
import gui.botones.Justificado;
import model.Document;

public class Canvas extends JTextArea {

	private Document document;
	private int lineWidth; // Number of characters per line

	private Map<String, Boton> botones;
	private Boton botonSeleccionado;

	public Canvas(Document document, JRadioButton... botones) {
		setFont(new Font("Monospaced", Font.BOLD, 24));
		setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
		setEditable(false);

		this.document = document;

		this.botones = new HashMap<>();
		crearBotones(botones);
		this.defaultBoton = botonSeleccionado = this.botones.get("Left");

		drawDocument();
	}

	// Método privado que inicializa los botones o herramientas del editor
	private void crearBotones(JRadioButton... botones) {
		for (int i = 0; i < botones.length; i++) {
			if (botones[i].getText().equals("Left"))
				this.botones.put(botones[i].getText(), new AlinearIzquierda(this));
			else if (botones[i].getText().equals("Justified"))
				this.botones.put(botones[i].getText(), new Justificado(this));
			else if (botones[i].getText().equals("Right"))
				this.botones.put(botones[i].getText(), new AlinearDerecha(this));
			else if (botones[i].getText().equals("Centered"))
				this.botones.put(botones[i].getText(), new Centrado(this));
		}
	}

	/**
	 * Adjust the number of characters per line to the given width in pixels. It is
	 * invoked when the container window is resized.
	 */
	public void adjustWidth(int width) {
		FontMetrics metrics = getFontMetrics(getFont());
		var charWidth = metrics.charWidth('A');
		var padding = getInsets().left + getInsets().right;
		lineWidth = (width - padding) / charWidth;

		drawDocument();
	}

	public void drawDocument() {
		setText("");

		// Principal cambio del código -> ya no hay if-else
		for (var line : document.getLines()) {
			botonSeleccionado.dibujaTexto(line);
			append("\n");
		}
	}

	// Método necesario para obtener el lineWidth desde los Estados (los botones)
	public int getLineWidth() {
		return this.lineWidth;
	}

	// Método para poder cambiar el botón seleccionado desde ejecución
	public void setSelectedButton(String buttonText) {
		this.botonSeleccionado = this.botones.get(buttonText);
	}
}
